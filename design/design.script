

#############################################
######### SIMPLE FACTORIAL FUNCTION #########
#############################################

#*

Go-Like inspired type following, a function per default consists
of:
- The function keyword "fn"
- The function identifier = a variable name.
- The function parameters in round brackets: (parameter name and
  its' type)
- The return type
- The function body.

ret = return
*#

fn factorial (n uint) int {
   if n <= 1
      ret 1
   # el if
      ret factorial(n - 1) * n
}

#####################################
######### PRINTING, METHODS #########
#####################################

#*

A form of functions provided by ScriptPL are methods. These do
not require round brackets and get a keyword highlight. Unlike
functions, that cannot return a value, they are just a set of
other methods.
Below is how content is printed to the console/ output.

Methods consist of the following structure:

            \/ No comma here
METHOD_TYPE   PARAM1, PARAM2, ...

*#

out factorial(5)

# Create a method consuming any amount of parameters.
# Output all parameters into the "out"-method, in addition the
# 0A-byte: newline character.
# This is how to create a method to output a newline and content
fn outln (params (...) _]) {
   out params, b0A
}

fn with_parameters (i int, j int, k int) {
   # Do something
}

fn without_parameters () {
   # Do something
}

outln 'Hello, World!'
with_parameters 5, 5, 5
without_parameters

</
   <tag attribute="value">
      <b>Hello, {{
         "World!"
      }}!</b>
   </tag>
/>

fn getHtml() {
   ret </<b>Hello, World!</b>/>
}
