

##########################################################################################
#########                                 BASICS                                 #########
##########################################################################################

# Brackets
{code}
(V)
type (T)
<labels>

public
_private # visible to the scope only

##########################################################################################
#########                                IMPORTS                                 #########
##########################################################################################

use 'strict', 'unsafe'

#*
- 'strict' is a special module that:
    - forces all values to be checked for type
    - bans lazy typing and lazy evaluation
    - automatic type conversions
*#

use 'html', 'ecs'

#*
- Use modules provided by the library
- e.g. 'html' provides html elements
- e.g. 'ecs' provides an entity component system
*#

use 'www.link-to-repo.com/path/to/.git'

#*
- use imported/downloaded modules
- must start with 'www.', 'http://' or 'https://'
- should end with '.git'
*#

# no need for commas
use 'src/path/to/file'  # navigate from source
    './path/to/file'    # . to navigate relative
    '../path/to/file'   # .. to navigate parent

##########################################################################################
#########                                 SCOPES                                 #########
##########################################################################################

a {
    # self = a
    b.c {
        # self = a.b.c
        d {
            # self = a.b.c.d
        }
    }

    fn e () {
        # fn a.e
    }
}

fn a.b.f () {
    # fn a.b.f
}

##########################################################################################
#########                               VARIABLES                                #########
##########################################################################################

be k uint = 0
be k = 0

be k List(T) = (str, int)
be k = List(T) (str, int)
be k List(T) = List(T) (str, int)

be k List(str) = ('sup', 'ppl')
be k = List(str) ('sup', 'ppl')
be k List(str) = List(str) ('sup', 'ppl')

# EXECUTED ONLY COMPILE TIME
for 'compile time' be smt = value

for 'compile time' {
    code
}

# Unpack values

be s, a, b, c = struct # s is the struct itself; a, b, c it's attributes
be _, a = (a = 5) # _ would be the struct itself (a = 5), a is here the attribute a, which is 5
be a : d, b : e, c : f = struct
be a : ..b = struct # a = struct.b
be a : ..b() = struct # a = struct.b()

be _, a, b, c = use smt
be smt = use smt

# be {} forces a boolean to give true, or throws error
# tries to be compile time
be {bool}

####################################### POINTERS #########################################

be k int = 5
be j @int = k

j = 6   # k and its' reference j are 6

be k int = 5
be z int 10
be j @int = k

j @= z  # set j to be z's reference, k is still 5

be k int = 5
be z @int = k
be j @int = k

##########################################################################################
#########                               FUNCTIONS                                #########
##########################################################################################

fn name (parameter int = default, ...) return_type {
    ret return_value
}

########################### LAST LINE IS RETURN - RUST INSPIRED ##########################

fn smt(a int, b int) num {
    a + b
}

###################################### MANY OUTPUTS ######################################

fn example () int, str, bool {
    5, 'Hi!', true
}

be a, b, c = example()

################################ ARROW FUNCTIONS / LAMBDA ################################

fn f (x) {
   2 * x + 5
}

be f = (x) => 2 * x + 5

################################# STACKABLE OPTIMIZATION #################################

out('Hello!')
out('How are you?', 'I\'m fine!')
out('You?')

# optimised compile time into out 'Hello!', 'How are you?', 'I\'m fine', 'You?', if no statement is inbetween.

fn out (params (...) str) {
    ...
}

#################################### SPECIAL FUNCTIONS ###################################

Type {
    # automatic declaration
    fn 'be' () Type {

    }

    # assign
    fn '=' (value _) {
        self = ...
    }

    # more specific assigns
    fn '+=' (value _) {
        # What you see here is the default implementation of +=
        self = self + value
    }

    #
    # You *can* leave the return type of arithmetic operations
    # making it functions calls *technically*
    #

    # Type + value
    fn '+' (value _) _ {
        self = ...
    }

    fn '-' (v _) _  # Type - value
    fn '*' (v _) _  # Type * value
    fn '/' (v _) _  # Type / value
    fn '%' (v _) _  # Type % value
    fn '^' (v _) _  # Type ^ value

    fn '!' () _  # !Type  (Conditional "not")
    fn '?' () _  # Type?  (Option unwrap operator)

    # Conditional and / or, etc.
    fn '&' (v _) _  # Type & value
    fn '|' (v _) _  # Type | value

    #
    # Writing `for 'compile time'` before a function will make - if possible -
    # be evaluated at compile time. 
    #
}

##########################################################################################
#########                                 LOOPS                                  #########
##########################################################################################

# loop indefinitely
for

# repeat  n (number) times
for number
for be i = number

# while
for condition

# traditional for loop
for be i = start_value; i < end_value; i += 1

# alternative
i int = 5                   # for ( i = s;
for {                       # standalone; for {} is a while true loop
    if i < end_value ret    # i < end_value ;
    # Content
    i += 1                  # i ++
}

# for elements of a tuple
for i, e in tuple

# for over an iterable
for ... in iterable
for iterable

# <a> becomes the "lifetime" and "label" of the loop, per default ret returns the function it's in.
for<a> {
    next<a> # continue
    ret<a>  # break
}

# for i in Range (...)
for i in (begin = 5, jump = 2) {
    # for in <struct>: begin: start; end: last accepted value or inf; jump: increment
    # This is called to the 'range' primitive
}

###################################### SCOPE LABEL #######################################

be value

for<x> y {
    for z {
        ret<x> value
    }
}

out (y == value) # true

######################################## SPECIAL #########################################

for 'special event' {
    # SPECIAL
}

##########################################################################################
#########                               OPERATIONS                               #########
##########################################################################################

######################################### STRINGS ########################################

be string str = 'Hello, World!'

string += ' Add more!'      # "Hello World! Add more!"              += add string

######################################### BOOLEAN ########################################

k = true

!k  # Get the opposite of the boolean

######################################### NUMERIC ########################################

k = 50000

k +=   500  # each represent arithmetic operations
k -=  1000
k *= 2
k /= 100
k %= 990    # 0

##########################################################################################
#########                              CONDITIONS                                #########
##########################################################################################

################################### BOOLEAN STATEMENTS ###################################

a < b <= c < d    # equivalent to:     a < b && b <= c && c < d (&& is & in here)
a == b == c       # equivalent to:     a == b && b == c
a < b == c < d    # equivalent to:     a < b && b == c && c < d
a > b > c         # also possible

# ILLEGAL
a < b > c         # but: could technically be interpreted as a < b && b > a
a > b < c         # therefore... could be legal?

####################################### AND | OR ########################################

a | b             # a or b
a & b             # a and b

##################################### CONTROL FLOW ######################################

# if statement
if c {}
# else if statement
el if c {}
# else statement
el {}

# for in an if
for smt {
    # loop while smt
} el if smt {
    # if not smt
    # if smt was NEVER true
}

if smt {
    # if smt
} el for smt2 {
    # if not smt
}

################################### in AS ELEMENT OF ####################################

# ELEMENT in LIST/ARRAY
# CHAR in STRING/CHAR ARRAY/STRING ARRAY

out('a' in 'abc') # true
out('a' in 'bc')  # false
out('hello' in ('hello', 'world')) # true

###################################### SWITCH CASE ######################################

# case <values> <code>
# case <values> { <code> }
#
# case followed by two dots awaits boolean expressions
# case: <booleans> ...
#
# for switch statements more python-like syntax is considered culture

if value { # s stays for switch
    case k
        # code
    case m
        # code
    case: value > 5
        # code
}

if value {
    case val1 | val2 | val3
        # Match val1, val2 or val3

    case Type
        # Match if is type

    case: value > 5
        # Match if value is greater than 5

} el {
    # Nothing matched
}

# Arrow syntax
if value {
    case val1 | val2
        code
} el {
    # else code
}

############################### SWITCH CASE WITH FUNCTIONS ###############################

fn str.equalsSize(i int) bool, str {
    if self.len == i {
        ret true, 'v is this string'
    }
    ret false, ''
}

if 'Hello, World!'.equalsSize {
    case 13 -> v {
        out(v)
    }
}

##########################################################################################
#########                               EXAMPLE SCOPE                            #########
##########################################################################################

# Just the scope "API"
API {
    fn connect () {

    }
}

# Access functions in the scope
API.connect()

##########################################################################################
#########                              LAZY LOGIC                                #########
##########################################################################################

if k for if y {
    # if k  # if k  # if k equals true enter "next scope"
    # for   # for   # and loop indefinitely.
    # if y  # if y  # if y is true, run the code block, otherwise continue
}

# is the same as

if k {
    for {
        if y {
            ###
        }
    }
}

# is the same as

if k
    for
        if y
            ###

##########################################################################################
#########                               QUICK SYNTAX                             #########
##########################################################################################

# Ternary Operator

k = if true : 'True' el 'False'
j = if a : a_ el if b : b_ el c_

############################## SHORT ENTITY COMPONENT SYSTEM #############################

# Without specifying the entity id, just quickly operate over all
for query (Player, Position, Velocity) {
   Position.x += Velocity.x
   Position.y += Velocity.y
}

##########################################################################################
#########                                 ITERABLES                              #########
##########################################################################################

# iterable functions
fn iter(i int = 0, b int = 10) int, int {
    next

    fn next {
        i += 1
        if i >= b {
            ret
        }
        next
    }

}

for i in iter {
    out(i)  # 
}

##########################################################################################
#########                                 REGEX                                  #########
##########################################################################################

#
# Repetition Notation:
# {0-}          *   zero or more
# {1-}          +   one or more
# {-1}, {0-1}   ?   zero or one
# {n-n}         {n,n} exactly n
#

´\e{0-1}´

#
# custom regex char set or
# other regex insertions
#

be w = ´[01]´

´$(w){1-}´ # will match 0, 1, 01, etc.

####################################### AAA BBB CCC ######################################

be n int
be string_to_proof = 'aaabbbccc'

out(string_to_proof * ´(a)${l:n}(b){n}(c){n}´)  # true
out(n)                          # 3

#
# a${l:n}   # Scan for "l"ength of "a"'s, write into variable n
# b{n}      # Expect "b", n times
# c{n}      # Expect "c", n times
#

# ${}:      write into code
# $(), {}:  read from code

#
# ${l:var}  capture group length
# ${s:var}  capture group string
# ${b:var}  is the capture group emitted?: E.g. ´(bool)?${b:var}vvv´ returns true for 'boolvvv', but not 'vvv'
#

be map Map(str, str)
be k = 'h="Hello";g="World";z="Ocean";'

for key, value in k * ´(\w)${1}="(\w)${2}";´ {
    map.(key) = value 
}

out(map.('h') + ', ' + map.('g'))    # Hello, World!

##########################################################################################
#########                                HTML SYNTAX                             #########
##########################################################################################

be s str = 'an extended string, technically'
be k str = </
    <div>
        <h1>Hello World!</h1>
        <p>This is {{s}}.</p>
    </div>
/>

fn getHtml() {
    ret </<b>Hello, World!</b>/>
}

##########################################################################################
#########                              ABORT HANDLER                             #########
##########################################################################################

!sync fn long () {
    for true {}
    # this async function takes a lot of time to execute
}

# this is how to abort a function
!sync {
    be k Fn = {long()} # by warping the function call in a code body, you make it the function call

    k()

    # wait some time

    k.abort()
}

##########################################################################################
#########                                  FLAGS                                 #########
##########################################################################################

#
# The flag keyword after a declaration with arithmetic expressions indicates
# declaration of flags that will be used in code.
#

fn main {

    # We call the arithmetic operation and handle the result

    be k int = 2000000000
    be i int = 2000000000

    be r int = k + i
    flag overflow, 
        flag_c: carry,
        flag_s: sign,
        flag_z: zero,
        flag_p: parity,
        flag_a: adjust

    out(`Result: (r.to(str))`)

    # http://zeus.cs.pacificu.edu/shereen/OldCourses/cs430f08/Lectures/ch11bF08.pdf
    
    # result of a signed arithmetic operation is too large or too small to fit 
    if overflow:
        out('Overflow flag')

    # result of an unsigned arithmetic operation is too large to fit
    if flag_c:
        out('Carry flag')

    # result of an arithmetic or logical operation generates a negative result
    if flag_s:
        out('Sign flag')

    # result of an arithmetic or logical operation generates a result of zero
    if flag_z:
        out('Zero flag')

    # result of operation has even amount of bits
    if flag_p:
        out('Parity flag')

    # result of 'add' on last four bits is 1
    if flag_a:
        out('Auxiliary Carry flag')
    
}

##########################################################################################
#########                            PYTHON SPACE CHECK                          #########
##########################################################################################

if smt {
    a
}

# also smt => a
if smt
    a

if condition
    statement1
    statement2 # statement2 begins at the same indent as statement1, hence belongs to the code blocks

if
    condition # here code is just scanned till a condition is found
        statement # and then code is scanned for statement
    statement # doesn't belong to the if-block, since the statement is outdented.

statement3 # This statement doesn't belong to the if clause

# Functions and scopes need to have the code brackets

fn smt () {
    code_block
    if statement
        condition_block
        for
            loop
        condition
    code_block
}

TypeImplementation : ... {
    # methods
}

# You can also do it inline
if smt: a
for smt: a

##########################################################################################
#########                      QUICK NOTATIONS / EXPRESSIONS                     #########
##########################################################################################

# Say you have a List element full of nodes (in one direction):

type List: El (
    *Node(El, self) |
    *End
)

# This is one way to implement a 'get at position' function:

fn List.getElementAtPos (pos uint) ElementType {
    be latestChild @List(ElementType) = self
    for i in (begin = 0, end = pos) {
        # Bypasses the parser checks force-assuming a boolean to be true
        be {
            be List.Element = latestChild.1
        }
        # Index in the array.
        latestChild = latestChild.1
    }
    ret latestChild.0
}

# And here the short variant:

fn List.getElementAtPos (pos uint) Option<ElementType> {
    # self.len doesn't exist here but should as a possibility
    if pos > self.len: ret Option.None
    ret Option.Some(self .. (for pos: 1) . 0)
}