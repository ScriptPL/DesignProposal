

##########################################################################################
#########                                 BASICS                                 #########
##########################################################################################

# Brackets
{code}
(V)
type (T)
<labels>

public
_private # visible to the scope only
__special

##########################################################################################
#########                                SUMMARY                                 #########
##########################################################################################

# Code block is under the k-scope
sc k {}

# Code block under k-scope with Ty label
sc k: Ty {}

# Function with l label (which is also the tag and lifetime of the function)
fn<l> name (variable T, ...) (ret T) {
    # code block
}

# Define / Initialize
be k T
be k = V
be k T = V

function: params1, 2
function(params1, 2)
function:
    params1, 2
function:
    params1,
    2
params1 \function 2 #arithmetic notation

function:
function:
function:

# FUNCTION THAT TAKES A FUNCTION AS ARGUMENT
function: function

V = V # set operator => not a function call

##########################################################################################
#########                                IMPORTS                                 #########
##########################################################################################

use 'strict', 'asm'

#*
- strict bans assembly and unsafe coding, some other tricks
- asm unlocks coding with registers
*#

use 'lib/html', 'lib/ecs'

#*
- Use modules provided by the library
- e.g. 'html' provides html elements
- e.g. 'ecs' provides an entity component system
*#

use 'mod/www.link-to-repo.com/path/to/.git'

#*
- use imported/downloaded modules
*#

use 'src/path/to/file'  # use from source
use './path/to/file'    # . to use relative
use '../path/to/file'   # .. to navigate parent

# no need for commas
use 'a'
    'b'
    'c'

##########################################################################################
#########                                 SCOPES                                 #########
##########################################################################################

sc a {
    # self = a
    sc b.c {
        # self = a.b.c
        sc d {
            # self = a.b.c.d
        }
    }

    fn e () {
        # fn a.e
    }
}

fn a.b.f () {
    # fn a.b.f
}

##########################################################################################
#########                               VARIABLES                                #########
##########################################################################################

be k uint = 0
be k = 0

be k List(T) = (str, int)
be k = List(T) (str, int)
be k List(T) = List(T) (str, int)

be k List(str) = ('sup', 'ppl')
be k = List(str) ('sup', 'ppl')
be k List(str) = List(str) ('sup', 'ppl')

# EXECUTED ONLY COMPILE TIME
for 'compile time' be smt = value

for 'compile time' {
    code
}

# Unpack values

be (a, b, c) = struct
be (a, b, c) = use smt

be (a = b, c = d, e = f) = struct
be (a = b, c = d, e = f) = use smt

# be {} forces a boolean to give true, or throws error
# tries to be compile time
be {bool}


####################################### POINTERS #########################################

be k int = 5
be j @int = k

j = 6   # k and its' reference j are 6

be k int = 5
be z int 10
be j @int = k

j @= z  # set j to be z's reference, k is still 5

be k int = 5
be z @int = k
be j @int = k

##########################################################################################
#########                               FUNCTIONS                                #########
##########################################################################################

fn name (parameter int = default, ...) return_type {
    ret return_value
}

###################################### MANY OUTPUTS ######################################

fn example () int, str, bool {
    ret 5, 'Hi!', true
}

be a, b, c = example()

######################################### CALLS ##########################################

fn call (params) {

}

# arithmetic
fn plus (a int, b int) int {
    ret a + b
}

call (params)
call: params

a \plus b

################################ ARROW FUNCTIONS / LAMBDA ################################

fn f (x) {
   ret 2 * x + 5
}

be f = (x) => 2 * x + 5

################################# STACKABLE OPTIMIZATION #################################

out: 'Hello!'
out: 'How are you?', 'I\'m fine!'
out: 'You?'

# optimised compile time into out 'Hello!', 'How are you?', 'I\'m fine', 'You?', if no statement is inbetween.

fn out (params (...) str) {
    ...
}

########################### LAST LINE IS RETURN - RUST INSPIRED ##########################

fn smt() num {
    a + b
}

################################# SPECIAL TYPE FUNCTIONS #################################

sc Type {
    # Type = ...
    fn __assign(value _) {
        self = ...
    }

    # Type += ...
    fn __assign_plus(value _) {
        self = ...
    }

    fn __assign_minus(v _)       # -=
    fn __assign_multiply(v _)    # *=
    fn __assign_division(v _)    # /=
    fn __assign_mod(v _)         # %=
    fn __assign_power(v _)       # ^=
    # ...

    # Type + ...
    fn __plus(value _) {
        self = ...
    }

    fn __minus(v _)       # -=
    fn __multiply(v _)    # *=
    fn __division(v _)    # /=
    fn __mod(v _)         # %=
    fn __power(v _)       # ^=
    # ...
}

##########################################################################################
#########                                 LOOPS                                  #########
##########################################################################################

# loop indefinitely
for

# repeat  n (number) times
for number
for be i = number

# while
for condition

# traditional for loop
for be i = start_value; i < end_value; i += 1

# alternative
i int = 5                   # for ( i = s;
for {                       # standalone; for {} is a while true loop
    if i < end_value ret    # i < end_value ;
    # Content
    i += 1                  # i ++
}

# for elements of a tuple
for i, e in tuple

# for over an iterable
for ... in iterable
for iterable

# <a> becomes the "lifetime" and "label" of the loop, per default ret returns the function it's in.
for<a> {
    next<a> # continue
    ret<a>  # break
}

# for i in Range (...)
for i in (begin = 5, jump = 2) {
    # for in <struct>: begin: start; end: last accepted value or inf; jump: increment
    # This is called to the 'range' primitive
}

###################################### SCOPE LABEL #######################################

be value

for<x> y {
    for z {
        ret<x> value
    }
}

out: y == value # true

######################################## SPECIAL #########################################

for 'special event' {
    # SPECIAL
}

##########################################################################################
#########                               OPERATIONS                               #########
##########################################################################################

######################################### STRINGS ########################################

be string str = 'Hello, World!'

string += ' Add more!'      # "Hello World! Add more!"              += add string

######################################### BOOLEAN ########################################

k = true

!k  # Get the opposite of the boolean

######################################### NUMERIC ########################################

k = 50000

k +=   500  # each represent arithmetic operations
k -=  1000
k *= 2
k /= 100
k %= 990    # 0

##########################################################################################
#########                              CONDITIONS                                #########
##########################################################################################

################################### BOOLEAN STATEMENTS ###################################

a < b <= c < d    # equivalent to:     a < b && b <= c && c < d (&& is & in here)
a == b == c       # equivalent to:     a == b && b == c
a < b == c < d    # equivalent to:     a < b && b == c && c < d
a > b > c         # also possible

# ILLEGAL
a < b > c         # but: could technically be interpreted as a < b && b > a
a > b < c         # therefore... could be legal?

####################################### AND | OR ########################################

a | b             # a or b
a & b             # a and b

##################################### CONTROL FLOW ######################################

# if statement
if c {}
# else if statement
el if c {}
# else statement
el {}

# for in an if
for smt {
    # loop while smt
} el if smt {
    # if not smt
    # if smt was NEVER true
}

if smt {
    # if smt
} el for smt2 {
    # if not smt
}

################################### in AS ELEMENT OF ####################################

# ELEMENT in LIST/ARRAY
# CHAR in STRING/CHAR ARRAY/STRING ARRAY

out: 'a' in 'abc' # true
out: 'a' in 'bc'  # false
out: 'hello' in ('hello', 'world') # true

###################################### SWITCH CASE ######################################

# case <values> <code>
# case <values> { <code> }
#
# case followed by two dots awaits boolean expressions
# case: <booleans> ...
#
# for switch statements more python-like syntax is considered culture

if value { # s stays for switch
    case k
        # code
    case m
        # code
    case: value > 5
        # code
}

if value {
    case val1 | val2 | val3
        # Match val1, val2 or val3

    case Type
        # Match if is type

    case: value > 5
        # Match if value is greater than 5

} el {
    # Nothing matched
}

# Arrow syntax
if value {
    # case val1 | val2 {code}
    val1 | val2 => code
} el {
    # else code
}

############################### SWITCH CASE WITH FUNCTIONS ###############################

fn str.equalsSize(i int) bool, str {
    if self.len == i {
        ret true, 'v is this string'
    }
    ret false, ''
}

if 'Hello, World!'.equalsSize {
    case 13 -> v {
        out v
    }
}

##########################################################################################
#########                               EXAMPLE SCOPE                            #########
##########################################################################################

# Just the scope "API"
sc API {
    fn connect () {

    }
}

# Access functions in the scope
API.connect()

#################################### UNIVERSAL SCOPE #####################################
# Traits

sc self {
    fn ref () T(self) {
        ret @self
    }

    fn out () {
        out: self
    }
}

'Hello World'.out()

##########################################################################################
#########                              LAZY LOGIC                                #########
##########################################################################################

if k for if y {
    # if k  # if k  # if k equals true enter "next scope"
    # for   # for   # and loop indefinitely.
    # if y  # if y  # if y is true, run the code block, otherwise continue

    ###
}

# is the same as

if k {
    for {
        if y {
            ###
        }
    }
}

# is the same as

if k
    for
        if y
            ###

##########################################################################################
#########                               QUICK SYNTAX                             #########
##########################################################################################

# Ternary Operator

k = if true : 'True' el 'False'
j = if a : a_ el if b : b_ el c_

############################## SHORT ENTITY COMPONENT SYSTEM #############################

# Without specifying the entity id, just quickly operate over all
for query (Player, Position, Velocity) {
   Position.x += Velocity.x
   Position.y += Velocity.y
}

##########################################################################################
#########                                 ITERABLES                              #########
##########################################################################################

# iterable functions
fn iter(i int = 0, b int = 10) int, int {
    next

    fn next {
        i += 1
        if i >= b {
            ret
        }
        next
    }

}

for i in iter {
    out: i  # 
}

##########################################################################################
#########                                 REGEX                                  #########
##########################################################################################

#
# Repetition Notation:
# {0-}          *   zero or more
# {1-}          +   one or more
# {-1}, {0-1}   ?   zero or one
# {n-n}         {n,n} exactly n
#

´\e{0-1}´

#
# custom regex char set or
# other regex insertions
#

be w = ´[01]´

´$(w){1-}´ # will match 0, 1, 01, etc.

####################################### AAA BBB CCC ######################################

be n int
be string_to_proof = 'aaabbbccc'

out: string_to_proof * ´(a)${l:n}(b){n}(c){n}´  # true
out: n                          # 3

#
# a${l:n}   # Scan for "l"ength of "a"'s, write into variable n
# b{n}      # Expect "b", n times
# c{n}      # Expect "c", n times
#

# ${}:      write into code
# $(), {}:  read from code

#
# ${l:var}  capture group length
# ${s:var}  capture group string
# ${b:var}  is the capture group emitted?: E.g. ´(bool)?${b:var}vvv´ returns true for 'boolvvv', but not 'vvv'
#

be map Map(str, str)
be k = 'h="Hello";g="World";z="Ocean";'

for key, value in k * ´(\w)${1}="(\w)${2}";´ {
    map.(key) = value 
}

out: map.('h') .. ', ' .. map.('g')    # Hello, World!

##########################################################################################
#########                                HTML SYNTAX                             #########
##########################################################################################

be s str = 'an extended string, technically'
be k str = </
    <div>
        <h1>Hello World!</h1>
        <p>This is {{s}}.</p>
    </div>
/>

fn getHtml() {
    ret </<b>Hello, World!</b>/>
}

##########################################################################################
#########                                ASSEMBLY                                #########
##########################################################################################

OF # Overflow Flag:        Overflow of SIGN bit: (int4) 0100 + 0100 = 1000; 4 + 4 = 8, but here: -7
DF # Direction Flag:
IF # Interrupt Flag:
TF # Trap Flag:
SF # Sign Flag:            Sign of result of arithmetic operation
ZF # Zero Flag:            Result of arihtmetic operation is zero
AF # Auxiliary Carry Flag: 
PF # Parity Flag:          Amount of zeros after arithmetic operation
CF # Carry Flag:           Carry:   1010 + 1011 = 1, 0101

##########################################################################################
#########                            PYTHON SPACE CHECK                          #########
##########################################################################################

# Undoubtedly smt => a
if smt {
    a
}

# also smt => a
if smt
    a

if condition
    statement1
    statement2 # statement2 begins at the same indent as statement1, hence belongs to the code blocks

if
    condition # here code is just scanned till a condition is found
        statement # and then code is scanned for statement
    statement # doesn't belong to the if-block, since the statement is outdented.

statement3 # This statement doesn't belong to the if clause

fn smt ()
    code_block
    if statement
        condition_block
        for
            loop
        condition
    code_block

sc TypeImplementation : ...
    # methods
