

##########################################################################################
#########                                  GCD                                   #########
##########################################################################################

fn gdc(a uint, b uint) {
    # JS: https://stackoverflow.com/a/17445307/16002144
    if a == 0
        ret b # Transforms into python syntax "technically"

    for b != 0 {
        if a > b
            a -= b
        el
            b -= a
    }

    ret a
}

out: gcd(2, 5)

##########################################################################################
#########                           FACTORIAL FUNCTION                           #########
##########################################################################################

fn factorial (n uint) uint
    if n <= 1
        ret 1
    el # this line can be comment technically
        ret self(n - 1) * n

fn factorial (n uint) uint {
    be r = 1
    for i in (begin = 1, end = n) {
        r *= n
    }
    ret n
}

##########################################################################################
#########                               FIBONACCI                                #########
##########################################################################################

fn fibonacci () List(uint) {
    be f = (0, 1)

    for 1000 {
        f += f.(f.l - 1) + f.(f.l) # push to f: sum of last two values
    }

    ret f
}

out: fibonacci().to(str)

############################## DEFINING RECURSIVE FIBONACCI ##############################

#* be fibonacci func(uint -> uint) = (n uint) uint => if n {
    n <= 1 => 1
    el self(n - 1) + self(n - 2)
} *#

be fibonacci func(uint -> uint) = (n uint) uint => {
    be a, b, c reg(64)
    for n {
        i += j
    }
}

##########################################################################################
#########                               OUTPUT PRINT                             #########
##########################################################################################

out: 'Hello, World!'

##########################################################################################
#########                                 METHODS                                #########
##########################################################################################
#
# Ways to call a function:
# hello (params)    # Function with return value
# hello: params     # Method
#

fn print_element (params (...)) {
    for i, e in params {
        if e {
            # value case type checks if the value is of the type
            # type case type checks for type equality
            case str
                out:
                    e, b0A
            
            case int
                out:
                    e.to(str), b0A

            case bool
                out: (if e : 'true' el false), b0A
        }
    }
}

fn print_element (params (...)) {
    for i, e in params {
        if e {
            case str  out: e, b0A
            case int  out: e.to(str), b0A
            case bool out: (if e : 'true' el false), b0A
        }
    }
}

print_element: 'Hello', 5, false

##########################################################################################
#########                             PRIME GENERATION                           #########
##########################################################################################

fn genPrimes (total int) List(int) {
    be primes List(int) = (2, 3)

    for i in (begin = 5, end = total, jump = 2) {
        isPrime = true

        for j, e in primes {
            if e % i == 0 {
                isPrime = false
                ret # indicated the inner-most loop "for j, e in primes"
            }
        }

        if isPrime {
            primes += i # insert i to the primes list
        }
    }

    ret primes
}

out: genPrimes (500)

##########################################################################################
#########                        READABLE GAMEDEV SETUP                          #########
##########################################################################################

use 'lib/html'

App {
    be canvas HTMLCanvasElement
    be x, y int
    be keys Tags(str)

    fn init() {
        canvas = document.getElementById('#canvas')

        x = canvas.width * .5
        y = canvas.height * .5

        animationFrame:
        addEventListeners:
    }

    fn animationFrame() {
        update:
        render:
    }

    fn update() {
        be xDir = if keys.has('a') : -1 el 0 + if keys.has('d') : 1 el 0
        be yDir = if keys.has('w') : -1 el 0 + if keys.has('s') : 1 el 0

        x, y += xDir, yDir
    }

    fn render() {
        canvas.fillColor = 'black'
        canvas.fillRect(0, 0, canvas.width, canvas.height)

        canvas.fillColor = 'white'
        canvas.fillRect(x - 10, y - 10, 20, 20)
    }

    fn addEventListeners() {
        document.addEventListener('keydown', event => {
            keys.push(event.key.toLower())
		})

		document.addEventListener('keyup', event => {
            keys.remove(event.key.toLower())
		})
    }
}

# window.onload is designed to be an event listener with code attaching using +=
window.onload += () => {
    App.init()
}

##########################################################################################
#########            IMPROVED REGEX CAPABILITIES ~ QUICK HTML PARSER             #########
##########################################################################################

type HtmlElement (
    name str
    content (List(self) | str)
)

be text = '<b><i>Hello</i>, <u>World</u>!</b>'

fn parseHTML (t str) HtmlElement {
    be output = HtmlElement(
        name = 'div',
        content = ()
    )

    be tokens List(str) = t.tokenize(´<\w>|<\/\w>|[/<]+´)
    be position List(@List(HtmlElement)) = (output)

    for _, e in tokens {
        be k str

        if e.match {
            case ´<(\w)${s:k}>´
                # last() gets outer-most element and pushes into its' reference
                position.last().push(name = k, content = ())
                position = position.last().content

            case ´<\/(\w)${s:k}>´
                position.pop()
                if position.name != k
                    throw `</(k)> closes <(position.name)>`
        } el {
            position.push(e)
        }
    }

    ret output
}

out: parseHTML(text)

#
# b {
#   i {
#     "Hello"
#   }
#   ","
#   u {
#     "World"
#   }
#   "!"
# }

##########################################################################################
#########                                  THROW                                 #########
##########################################################################################

throw 'Throwing an error'

##########################################################################################
#########            ADDING DEFAULT ARITHMETIC OPERATIONS TO A CLASS             #########
##########################################################################################

type Vector (num * 3)

Vector {
    fn '+' (self, v Vector) Vector {
        ret Vector (self.0 + v.0, self.1 + v.1, self.2 + v.2)
    }
}

out: Vector(2, 3, 4) + Vector(3, 4, 5)