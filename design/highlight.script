

######### COMMENTS #########

#
# Single-Line comments are made with the hash
#

#*
    #*
        Multiline comments are started with the hash and asterisk and closed in reversed order.
    *#

    Comments opened inside other comments need to be closed, too.

*#

######### STRINGS #########

"Strings can be opened/closed with double quotation marks or"
'single quotation marks. Escaping them \' works as flawless.'
`Template strings $(are) included.`
´RegEx´
´\w[\.\w]{0-}@\w[\.\w]{0-*1}\.com´

######### NUMERICS #########

-100.00
-.5
.00

######### VARIABLE COLORING #########

# Variables need to start with a letter or underscore,
# can follow with letters, underscore and numbers.
# the underscore at start indicates variable privacy.
abcdef012345, _hello_world

# All variables starting with uppercase letters are
# usually types (but not hardcoded)
Abcdef012345, _HelloWorld

var_iable := y
_private_var = y
xXXXXXx => y
Xxxxxxx()

######### RESERVED TYPES #########
# Numeric types can followed with any digit

any, uint64, int, int32, num, str, regex, bool, byte, func, code

######### RESERVED KEYWORDS #########

use             # package management

fn              # universal declaration of code: first-class function, attributes, etc.
type            # universal structure/enum/type declaration
for, in, next   # repetetive control flow
exit, ret       # exit scope or return to parent scope
                # continuing everything on a separate thread
throw           # program throw
if, elif, el    # conditional control flow
case

true, false     # values
be              # other
self, super     # recursive self or parent reference

T, V, _         # Type, Value, "null"

######### RESERVED CONSTANTS #########

window, document, process

######### EXAMPLE #########

@attr something
fn name () int {
    method: method parameters
    exit -123456789.0
}