
##########################################################################################
#########                               THE OPTION                               #########
##########################################################################################

type Option : Value (*Some(Value), None)

Option(Value)

# You can leave out the brackets to make it python like "indent based" syntax
# {

    fn unwrap() Value {
        if be Option.Some(value) = self {
            ret value
        }
        throw:p 'Panicked! Unwrapped value is None.'
    }

    fn is_none() bool {
        ret be Option.None = self
    }

    fn is_some() bool {
        ret !self.is_none()
    }

# }

##########################################################################################
#########                                THE LIST                                #########
##########################################################################################

$[prim "list"]
type List : ElementType (
    _list RawList(ElementType)
    _last @RawList(ElementType)
    len uint
)

type RawList : ElT (
    *Element(ElT, self) |
    *Endpoint
)

RawList(ElementType) # {

    fn getElementAtPos (pos uint) ElementType {
        be latestChild @List(ElementType) = self
        for i in (begin = 0, end = pos) {
            # Bypasses the parser force-assuming a boolean to be true
            $[trust] be List.Element = latestChild.1
            # Index in the array.
            latestChild = latestChild.1
        }
        ret latestChild.0
    }

    fn<a> push (element ElementType) {
        be latestChild @List(ElementType) = self
        for {
            if be List.Element = latestChild.1 { # while the next child is an element, update the pointer.
                latestChild = latestChild.1
            } el { # if the next child isn't an element, make it one.
                latestChild = RawList.Element(element, RawList.Endpoint)
                self._last = latestChild.1
                ret<a>
            }
        }
    }

    fn<a> pop () ElementType {
        be latestChild @List(ElementType) = self
        for {
            if be List.Element = latestChild.1 { # while the next child is an element, update the pointer.
                latestChild = latestChild.1
            } el { # if the next child is the endpoint, then make the current node an endpoint
                # latestChild.0 COLLECT GARBAGE?
                self._last = latestChild
                latestChild = RawList.Endpoint
                ret<a>
            }
        }
    }

# }

List(ElT)

# {

    $[compile time]
    fn $[assign] (content ()ElT) {
        self = (
            len = content.len,
            #_list = [tree ????] ????
        )
    }

    # fn self: SELF.()
    fn self (pos uint) ElT {
        $[compile time] if pos > self.len {
            throw "Index out of range!"
        }
        ret self._list.getElementAtPos(pos)
    }

    fn push (element ElT) {
        self._list.push(element)
        ret self.len += 1
    }

    fn pop () {
        if self.len == 0 ret
        self._list.pop:
        ret self.len -= 1
    }

    #*fn:sum (value ElT) self {
        self.push(value)
        ret self
    }*#

    fn:sum:assign (values (...) ElT) {
        for _, e in values {
            self.push(values)
        }
    }

    fn combine (list self) {
        # Join the list references
        self._last.1 = list._list
        # Some collection of garbage
    }

# }

# Usage:
be k List(uint) = ()
k.push(50)  # 0
k.push(100) # 1
k += 150    # 2

out: k.(1)  # 100

##########################################################################################
#########                               THE STRING                               #########
##########################################################################################

$[prim "string"] # prim stays for primitive
type str = List(char)

str

    # k self is the same as k str; indicates str + str 
    fn:sum(k self) {
        # Call List methods
        self.combine(k)
    }

##########################################################################################
#########                               THE NUMBER                               #########
##########################################################################################

$[prim "number"]
type num = (byte * 2) # Sort of

num #{

    fn to (conversion T) T {
        $[ret type] = conversion

        if conversion {
            # you don't need case:t in case of type comparisons
            case str
                # 
        }
    }

#}

##########################################################################################
#########                         ENTITY COMPONENT SYSTEM                        #########
##########################################################################################

ECS

    be _id uint = 0
    be _map Map(T, Map(uint, _)) = Map()

    fn entity() uint {
        ret _id += 1
    }

    # entity.add(CompType (value))
    fn add(eid uint, comp _) {
        # The following will be executed ONLY during compilation and disappears in runtime
        $[compile time] {
            # Compile time make sure that the map object has a proper hierarchy
            _map.(T(comp)) = Map(uint, T(comp))

            # Writes into the type as if it's controlling it:
            # CompType.self is created => CompType.(int) becomes possible
            T(comp) {
                fn self (id uint) T(comp) {
                    ret _map.(T(comp)).(id)
                }
            }
        }

        # Type Logic goes here:
        $[trust] be Map(uint, T(comp)) = _map.(T(comp))

        be _map.(T(comp)).(eid) = comp # _map.comp_type.eid = comp, alternatively, V(comp) can be used
    }

    fn query(comps (...) T]) func {
        if comps.len == 0 ret fn () {}

        be entities Set(uint) # Sets are hashmaps without content: You just add keys and remove them
        _map.(comps.shift()).iter((key uint, value _) => entities.add(key))

        # Remove entities from set that don't have one of the component types
        for _, e1 T in comps
            for _, e2 uint in entities
                if !_map.(e1).has(e2)
                    entities.del(e2)

        # Return the entities iterator
        ret entities.iterator
    }


# Usage:

be (entity, query, add) = use 'lib/ecs'

type Player
type Position (x int, y int)

be player = entity()

add(player, Player)
add(player, Position (x = 50, y = 50))
add(player, Velocity (x = -1, y = -1))

be iter = query (Player, Position) # iter is a function
for eid uint in iter {
   Position.(eid).x += Velocity.(eid).x
   Position.(eid).y += Velocity.(eid).y
}

# Assets

type Asset(Image)

be e = entity()

add(e, Player)
add(e, Position (x = 50, y = 50))
add(e, Asset(Image(w = 50, h = 50)))

for eid in query (Position, Asset) {
   Asset.(eid).render()
}