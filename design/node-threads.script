

##########################################################################################
#########                     THREADING IN SCRIPT IS AUTOMATED                   #########
##########################################################################################

#*
        a   b
       /|  / 
      / | /  
     /  |/   
    c   x
    |  / 
    | /
    |/  
    g + 1
*#

fn something_random (a, b) {
    c = (a + b) / 2
    x = b ^ 2 / 2
    g = c + x
    ret g + 1
}

out(something_random(5, 10))

# No code block runs synchronously in script, everything is asynchronous by default,
# rather you have to explicitly make it synchronous by adding the `sync` keyword.
# In the example above c and x are calculated simultanously on two threads and g is
# calculated when c and x are ready.

fn hello () {
    for be i = 10
        out(i)
}

for 10
    hello()

# Ten times starts hello() 10 times in parallel.

!sync
fn hello () {
    for be i = 10
        out(i)
}

for 10
    hello()

# Ten times starts hello() 10 times in parallel.

# However, while automatically threaded variables are a thing, output will still
# be treated synchronously on a buffer.

sync    # synchronous code
!sync   # asynchronous code (NOT operator + sync keyword)

# Await asynchronous processes

!sync {
    be k1 = process1()
    be k2 = process2()

    # Interpret wordly: "Synchronize values k1 and k2" => await k1 and k2
    sync = k1, k2

    out('k1 and k2 are received')
}

##########################################################################################
#########                ASYNCHRONOUS PROCESSES AND RESOURCE SHARING             #########
##########################################################################################

be isResourceFree = true

!sync fn thread () {
    # do smt

    # synchronize through object
    sync isResourceFree {
        for !isResourceFree {
            isResourceFree = false
        }

        # use resource or so

        isResourceFree = true
    }

    # do smt
}

!sync {
    be k1 = thread()
    be k2 = thread()
}

##########################################################################################
#########                        ON THE FLOW OPTIMIZATION                        #########
##########################################################################################

type uint = (byte * 4)

uint {
    fn to (v T) T {
        if v {
            case int
                v.0 = 0
                ret v
        }
    }
}

be k uint = 5

out(k.to(int))  # the if-case is unpacked compile time; all statements are
                # transformed into a reaction chain that is optimised compile time
